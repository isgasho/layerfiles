// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package filewatcher_model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FuseFilewatcherClientClient is the client API for FuseFilewatcherClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FuseFilewatcherClientClient interface {
	Reconnect(ctx context.Context, in *ReconnectReq, opts ...grpc.CallOption) (*ReconnectResp, error)
	AllowReads(ctx context.Context, in *AllowReadsReq, opts ...grpc.CallOption) (*AllowReadsResp, error)
	Sync(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (*SyncResp, error)
	Copy(ctx context.Context, in *CopyReq, opts ...grpc.CallOption) (*CopyResp, error)
}

type fuseFilewatcherClientClient struct {
	cc grpc.ClientConnInterface
}

func NewFuseFilewatcherClientClient(cc grpc.ClientConnInterface) FuseFilewatcherClientClient {
	return &fuseFilewatcherClientClient{cc}
}

func (c *fuseFilewatcherClientClient) Reconnect(ctx context.Context, in *ReconnectReq, opts ...grpc.CallOption) (*ReconnectResp, error) {
	out := new(ReconnectResp)
	err := c.cc.Invoke(ctx, "/filewatcher_model.FuseFilewatcherClient/Reconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseFilewatcherClientClient) AllowReads(ctx context.Context, in *AllowReadsReq, opts ...grpc.CallOption) (*AllowReadsResp, error) {
	out := new(AllowReadsResp)
	err := c.cc.Invoke(ctx, "/filewatcher_model.FuseFilewatcherClient/AllowReads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseFilewatcherClientClient) Sync(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (*SyncResp, error) {
	out := new(SyncResp)
	err := c.cc.Invoke(ctx, "/filewatcher_model.FuseFilewatcherClient/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseFilewatcherClientClient) Copy(ctx context.Context, in *CopyReq, opts ...grpc.CallOption) (*CopyResp, error) {
	out := new(CopyResp)
	err := c.cc.Invoke(ctx, "/filewatcher_model.FuseFilewatcherClient/Copy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FuseFilewatcherClientServer is the server API for FuseFilewatcherClient service.
// All implementations must embed UnimplementedFuseFilewatcherClientServer
// for forward compatibility
type FuseFilewatcherClientServer interface {
	Reconnect(context.Context, *ReconnectReq) (*ReconnectResp, error)
	AllowReads(context.Context, *AllowReadsReq) (*AllowReadsResp, error)
	Sync(context.Context, *SyncReq) (*SyncResp, error)
	Copy(context.Context, *CopyReq) (*CopyResp, error)
	mustEmbedUnimplementedFuseFilewatcherClientServer()
}

// UnimplementedFuseFilewatcherClientServer must be embedded to have forward compatible implementations.
type UnimplementedFuseFilewatcherClientServer struct {
}

func (UnimplementedFuseFilewatcherClientServer) Reconnect(context.Context, *ReconnectReq) (*ReconnectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reconnect not implemented")
}
func (UnimplementedFuseFilewatcherClientServer) AllowReads(context.Context, *AllowReadsReq) (*AllowReadsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllowReads not implemented")
}
func (UnimplementedFuseFilewatcherClientServer) Sync(context.Context, *SyncReq) (*SyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedFuseFilewatcherClientServer) Copy(context.Context, *CopyReq) (*CopyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Copy not implemented")
}
func (UnimplementedFuseFilewatcherClientServer) mustEmbedUnimplementedFuseFilewatcherClientServer() {}

// UnsafeFuseFilewatcherClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FuseFilewatcherClientServer will
// result in compilation errors.
type UnsafeFuseFilewatcherClientServer interface {
	mustEmbedUnimplementedFuseFilewatcherClientServer()
}

func RegisterFuseFilewatcherClientServer(s grpc.ServiceRegistrar, srv FuseFilewatcherClientServer) {
	s.RegisterService(&FuseFilewatcherClient_ServiceDesc, srv)
}

func _FuseFilewatcherClient_Reconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReconnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseFilewatcherClientServer).Reconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filewatcher_model.FuseFilewatcherClient/Reconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseFilewatcherClientServer).Reconnect(ctx, req.(*ReconnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuseFilewatcherClient_AllowReads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllowReadsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseFilewatcherClientServer).AllowReads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filewatcher_model.FuseFilewatcherClient/AllowReads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseFilewatcherClientServer).AllowReads(ctx, req.(*AllowReadsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuseFilewatcherClient_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseFilewatcherClientServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filewatcher_model.FuseFilewatcherClient/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseFilewatcherClientServer).Sync(ctx, req.(*SyncReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuseFilewatcherClient_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseFilewatcherClientServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filewatcher_model.FuseFilewatcherClient/Copy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseFilewatcherClientServer).Copy(ctx, req.(*CopyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FuseFilewatcherClient_ServiceDesc is the grpc.ServiceDesc for FuseFilewatcherClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FuseFilewatcherClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filewatcher_model.FuseFilewatcherClient",
	HandlerType: (*FuseFilewatcherClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reconnect",
			Handler:    _FuseFilewatcherClient_Reconnect_Handler,
		},
		{
			MethodName: "AllowReads",
			Handler:    _FuseFilewatcherClient_AllowReads_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _FuseFilewatcherClient_Sync_Handler,
		},
		{
			MethodName: "Copy",
			Handler:    _FuseFilewatcherClient_Copy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "MetaMessage.proto",
}
